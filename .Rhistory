types <- unique(ts$type)
u <- c(60, 70, 125, 200, 100, 800, 100, 50, 50, 100, 25, 40)
i <- 1
for (typex in types){
ts_type <- ts %>%
filter(type == typex)
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
plot(x = rep(1:nrow(ts_type),
each = 1),
y = unlist(ts_type$`daily count modified`),
main = paste("Peak-Over-Threshold plot Exceedances for : ", typex),
sub = paste("threshold =", u[i]),
xlab = "Observations",
ylab = "Threshold")
abline(abline(h = u[i], col = "red"))
i <- i+1
}
library(here)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(fpp3)
library(ggthemes)
# Read in the data
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
# Create new column
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
# Add new column
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
# Pivot data frame
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, format = "%Y-%m-%d")
# Convert into tsibble
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount)) %>% # since duplicates need to keys
arrange(type, date)
# str(pageviews_ts) # to verify the structure of dataframe
library(plotly)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  #+
#theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
# NEED IMPROVEMENT UNREADABLE
library(plotly)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  #+
#theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
View(pageviews_ts)
pageview_ts <- pageview_ts %>%
pivot_wider(values_from =dailycount, names_from = type, date)
pageviews_ts <- pageviews_ts %>%
pivot_wider(values_from =dailycount, names_from = type, date)
pageviews_ts <- pageviews_ts %>%
pivot_wider(values_from = dailycount, names_from = type, date)
pageviews_ts <- pageviews_ts %>%
pivot_wider(values_from = dailycount, names_from = type)
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
# Create new column
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
# Add new column
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
View(pageviews)
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
View(pageviews)
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
# Pivot data frame
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
View(pageviews)
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, format = "%Y-%m-%d")
pageviews <- pageviews %>%
pivot_wider(values_from = dailycount, names_from = type)
View(pageviews)
pageviews <- pageviews %>%
pivot_wider(values_from = dailycount, names_from = type) %>%
mutate(Total = sum(pageviews[,2:13]))
pageviews <- pageviews %>%
pivot_wider(values_from = pageviews$dailycount, names_from = type) %>%
mutate(Total = sum(pageviews[,2:13]))
View(pageviews)
library(here)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(fpp3)
library(ggthemes)
# Read in the data
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
# Create new column
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
# Add new column
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
# Pivot data frame
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, format = "%Y-%m-%d")
# Convert into tsibble
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount)) %>% # since duplicates need to keys
arrange(type, date)
# str(pageviews_ts) # to verify the structure of dataframe
library(plotly)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  #+
#theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
pageviews$total <- pageviews %>%
mutate(Total = sum(pageviews[,2:13]))
pageviews2 <- pageviews %>%
pivot_wider(values_from = pageviews$dailycount, names_from = type)
pageviews2 <- pageviews %>%
pivot_wider(values_from = pageviews$dailycount, names_from = type)
library(here)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(fpp3)
library(ggthemes)
# Read in the data
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
# Create new column
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
# Add new column
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
# Pivot data frame
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, format = "%Y-%m-%d")
# Convert into tsibble
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount)) %>% # since duplicates need to keys
arrange(type, date)
# str(pageviews_ts) # to verify the structure of dataframe
library(plotly)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  #+
#theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
View(pageviews)
pageviews2 <- pageviews %>%
pivot_wider(values_from = pageviews$dailycount, names_from = type)
# pour chaque "type" on crée une time series modifiée "modified_ts" pour lesquelles on recalcules la valeur de daily count en utilisant la formule du dessus. etant donné qu'on a - Xi-7 on peut que commencer à calculer pour la 8ème observation de chaque time series (1 par type)
type <- as.factor(type)
# Create a modified time series using the initial one
modified_ts <- pageviews_ts
ind <- 1
for (i in levels(type)) {
subset_type <- pageviews_ts %>%
filter(type == i)
for (j in 1:nrow(subset_type)) {
if (j > 7) {
modified_ts$dailycount[[ind]] <- ((subset_type$dailycount[[j]] -  subset_type$dailycount[[j-7]])/subset_type$dailycount[[j-7]])*100
} else {
modified_ts$dailycount[[ind]] <- NA
}
ind <- ind + 1
}
}
modified_ts <- rename(modified_ts,
"daily count modified" = "dailycount")
modifiedts_plot <- modified_ts %>%
ggplot(mapping = aes(x = date,
y = `daily count modified`,
colour = factor(type))) +
geom_line() +
labs(title = "Modified Time Series: Web Traffic",
x = "Time of Occurrence [1D]",
y = "Modified Daily count",
fill = type)  +
theme_economist_white() # we can change the theme for something cooler ?
ggplotly(modifiedts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
# NEED IMPROVEMENT UNREADABLE
# Binding the modified daily count to have everything in the same place
ts <- bind_cols(pageviews_ts, modified_ts)
ts <- inner_join(pageviews_ts, modified_ts, by = c("type","date"))
ts <- ts %>%
arrange(type, date)
View(modified_ts)
max(modified_ts$`daily count modified`)
summary(modified_ts$`daily count modified`)
# solution to align the 0 : https://stackoverflow.com/questions/52443673/one-zeroline-for-two-y-axis-in-plotly
tss <- ts %>%
filter(type == "2016_Summer_Olympics")
yaxis1 <- list(zeroline = TRUE,
range = c(min(tss$`daily count modified`, na.rm = TRUE),max(tss$`daily count modified`, na.rm = TRUE))
)
yaxis2 <- list(
tickfont= list(color = "orange"),
overlaying="y",
side="right",
title="daily count",
zeroline = TRUE,
range = c(min(tss$`daily count modified`, na.rm = TRUE),max(tss$dailycount, na.rm = TRUE))
)
plot_ly(tss,width = 800, height = 350) %>%
add_lines(x = ~date,
y= ~`daily count modified`,
name = "daily count modified") %>%
add_lines(x = ~date,
y = ~dailycount,
name = "daily count",
yaxis = "y2") %>%
layout(title = "daily count for 2016 summery Olympics", yaxis = yaxis1 ,
yaxis2 = yaxis2) %>%
config(displayModeBar = FALSE)
# qqplot by types ( two ways)
types <- unique(ts$type)
# one plot per type
for (typex in types){
ts_type <- ts %>%
filter(type == typex)
qqnorm(ts_type$`daily count modified`,
ylab = "Latitude of Seismic Events",
col = "purple")
ggplot(data = ts_type, aes(sample = `daily count modified`)) +
geom_qq(color = "pink") +
geom_qq_line(color = "dark green") +
labs(y = "Latitude of Seismic Events") %>% print ()
}
types <- unique(ts$type)
for (typex in types){
ts_type <- ts %>%
filter(type == typex)
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(ts_type$`daily count modified`,
main = paste("Mean Residual Life Plot: Mean Excess Function for", typex))
}
pageviews_ts %>%
ggplot() +
geom_histogram(aes(x = dailycount), na.rm = TRUE) +
geom_vline(xintercept = mean (pageviews_ts$dailycount, na.rm = TRUE))
options(scipen=999)
library(plotly)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  #+
#theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
pageviews_ts %>%
ggplot() +
geom_histogram(aes(x = dailycount), na.rm = TRUE) +
geom_vline(xintercept = mean (pageviews_ts$dailycount, na.rm = TRUE))
types <- unique(ts$type)
thresholds <- c(60, 70, 125, 200, 100, 700, 100, 50, 35, 100, 25, 30)
i <- 1
for (typex in types){
ts_type <- ts %>%
filter(type == typex)
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
plot(x = rep(1:nrow(ts_type),
each = 1),
y = unlist(ts_type$`daily count modified`),
main = paste("Peak-Over-Threshold plot Exceedances for : ", typex),
sub = paste("threshold =", thresholds[i]),
xlab = "Observations",
ylab = "Threshold")
pot_points <- unlist(ts_type$`daily count modified`) > thresholds[i]
points(x = rep(1:nrow(ts_type), each = 1)[pot_points],
y = unlist(ts_type$`daily count modified`)[pot_points],
col = "red")
abline(abline(h = thresholds[i], col = "red"))
i <- i+1
}
ts_type <- ts %>%
filter(type == "Elizabeth_II ")
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(ts_type$`daily count modified`,
main = "Mean Residual Life Plot: Mean Excess Function for Elizabeth_II")
ts_type <- ts %>%
filter(type == "Elizabeth_II ")
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(ts_type$`daily count modified`,
main = "Mean Residual Life Plot: Mean Excess Function for Elizabeth_II")
# Binding the modified daily count to have everything in the same place
ts <- bind_cols(pageviews_ts, modified_ts)
ts <- inner_join(pageviews_ts, modified_ts, by = c("type","date"))
ts <- ts %>%
arrange(type, date)
ts_type <- ts %>%
filter(type == "Elizabeth_II ")
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(ts_type$`daily count modified`,
main = "Mean Residual Life Plot: Mean Excess Function for Elizabeth_II")
ts_type <- ts %>%
filter(type == "Elizabeth_II")
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(ts_type$`daily count modified`,
main = "Mean Residual Life Plot: Mean Excess Function for Elizabeth_II")
types <- unique(ts$type)
thresholds <- c(60, 70, 125, 200, 100, 700, 100, 50, 35, 100, 25, 30)
i <- 1
for (typex in types){
ts_type <- ts %>%
filter(type == typex)
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
plot(x = rep(1:nrow(ts_type),
each = 1),
y = unlist(ts_type$`daily count modified`),
main = paste("Peak-Over-Threshold plot Exceedances for : ", typex),
sub = paste("threshold =", thresholds[i]),
xlab = "Observations",
ylab = "Threshold")
pot_points <- unlist(ts_type$`daily count modified`) > thresholds[i]
points(x = rep(1:nrow(ts_type), each = 1)[pot_points],
y = unlist(ts_type$`daily count modified`)[pot_points],
col = "red")
abline(abline(h = thresholds[i], col = "red"))
i <- i+1
}
# qqplot by types ( two ways)
ts_type <- ts %>%
filter(type == "Elizabeth_II")
qqnorm(ts_type$`daily count modified`,
ylab = "Latitude of Seismic Events",
col = "purple")
ggplot(data = ts_type, aes(sample = `daily count modified`)) +
geom_qq(color = "pink") +
geom_qq_line(color = "dark green") +
labs(y = "Latitude of Seismic Events") %>% print ()
# qqplot by types ( two ways)
ts_type <- ts %>%
filter(type == "Elizabeth_II")
ggplot(data = ts_type, aes(sample = `daily count modified`)) +
geom_qq(color = "pink") +
geom_qq_line(color = "dark green") +
labs(y = "Daily Count")
ts_type <- ts %>%
filter(type == Elizabeth_II)
ts_type <- ts %>%
filter(type == "Elizabeth_II")
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
plot(x = rep(1:nrow(ts_type),
each = 1),
y = unlist(ts_type$`daily count modified`),
main = paste("Peak-Over-Threshold plot Exceedances for Elizabeth II"),
sub = paste("threshold =", 125),
xlab = "Observations",
ylab = "Threshold")
pot_points <- unlist(ts_type$`daily count modified`) > 125
points(x = rep(1:nrow(ts_type), each = 1)[pot_points],
y = unlist(ts_type$`daily count modified`)[pot_points],
col = "red")
abline(abline(h = 125, col = "red"))
# numerical method
# GDP model ?
#https://rdrr.io/cran/evir/man/gpd.html
library(evir)
modified_NoNA <- modified_ts %>% filter(!is.na(`daily count modified`))
ElizII <- modified_NoNA %>%
filter(type == "Elizabeth_II")
gpd.model_ElizII <- gpd(ElizII$`daily count modified`, threshold = mean(thresholds))
gpd.plot_ElizII <- tailplot(gpd.model)
# numerical method
# GDP model ?
#https://rdrr.io/cran/evir/man/gpd.html
library(evir)
modified_NoNA <- modified_ts %>% filter(!is.na(`daily count modified`))
ElizII <- modified_NoNA %>%
filter(type == "Elizabeth_II")
gpd_model_ElizII <- gpd(ElizII$`daily count modified`, threshold = mean(thresholds))
gpd_plot_ElizII <- tailplot(gpd_model_ElizII )
#gpd.sf <- gpd.sfall(gpd.plot,0.99)
# numerical method
# GDP model ?
#https://rdrr.io/cran/evir/man/gpd.html
library(evir)
modified_NoNA <- modified_ts %>% filter(!is.na(`daily count modified`))
ElizII <- modified_NoNA %>%
filter(type == "Elizabeth_II")
gpd_model_ElizII <- gpd(ElizII$`daily count modified`, threshold = mean(125))
par(mfrow = c(2,2)) # Change the panel layout to 2 x 2
plot(gpd_model_ElizII)
