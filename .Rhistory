pivot_longer(cols = starts_with("20"),
names_to = "date",
names_prefix = "20",
values_to = "daily count")
View(x)
View(pageviews)
# Read in the data
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
View(pageviews)
load(file = here::here("traffic.Rdata"))
View(pageviews)
x <- pageviews %>%
pivot_longer(cols = starts_with("20"),
names_to = "date",
names_prefix = "20",
values_to = "daily count")
View(x)
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
pageviews <- cbind(pageviews,
type)
View(pageviews)
# Reorder colum
col_order <- pageviews[, c(804, 1:803)]
View(col_order)
pageviews <- pageviews[, c(804, 1:803)]
View(pageviews)
y <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
View(y)
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
View(pageviews)
pageviews %>%
ggplot() +
geom_bar(mapping = aes(x = type,
y = frequency),
stat = "count")
pageviews %>%
ggplot() +
geom_bar(mapping = aes(x = type),
stat = "count")
type_freq <- pageviews %>%
group_by(type) %>%
summarise(count_sum = sum(),
mean = mean())
type_freq <- pageviews %>%
group_by(type) %>%
summarise(count_sum = sum(),
mean = mean(dailycount))
View(type_freq)
type_freq <- pageviews %>%
group_by(type) %>%
summarise(n = n(),
mean = mean(dailycount))
View(type_freq)
sum(pageviews[1, ])
str(pageviews)
# Convert into tsibble
pageviews_ts <- tsibble(pageviews, index = date)
typeof
typeof(pageviews$date)
?as.Date
pageviews$date <- as.Date(pageviews$date, "%y/%m/%d")
# Convert into tsibble
pageviews_ts <- tsibble(pageviews, index = date)
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, "%y/%m/%d")
pageviews$date
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
# Create new column
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
# Add new column
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
# Pivot data frame
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, format = "%Y-%m-%d")
pageviews$date
# Convert into tsibble
pageviews_ts <- tsibble(pageviews, index = date)
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount))
View(pageviews_ts)
str(pageviews_ts)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
group = type)) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count")  +
theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
group = type)) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  +
theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  +
theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T)
season_plot <- pageviews_ts %>%
gg_season(y = dailycount)
library(tsibble)
pageviews_nogaps <- fill_gaps(pageviews_ts)
pageviews_nogaps <- pageviews_ts %>%
fill_gaps()
library(here)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(fpp3)
# Read in the data
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
# Create new column
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
# Add new column
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
# Pivot data frame
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, format = "%Y-%m-%d")
# Convert into tsibble
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount)) # since duplicates need to keys
# str(pageviews_ts) # to verify the structure of dataframe
library(plotly)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  +
theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
# NEED IMPROVEMENT UNREADABLE
library(tsibble)
# Fill time gaps
pageviews_nogaps <- pageviews_ts %>%
fill_gaps()
# Seasonal plot
season_plot <- pageviews_nogaps %>%
gg_season(y = dailycount)
ggplotly(season_plot) %>%
config(displayModeBar = T)
season_plot
sub_series_SummerOlymp <- pageviews_nogaps %>%
mutate(quarter = str_c("Quarter ", as.character(quarter(date)))) %>%
plot_time_series(
.date_var = date,
.value = dailycount,
.facet_vars = quarter,
.facet_ncol = 4,
.color_var = quarter,
.facet_scales = "fixed",
.interactive = FALSE,
.legend_show = FALSE)
sub_series_SummerOlymp <- pageviews_nogaps %>%
filter(type == "2016_Summer_Olympics") %>%
mutate(quarter = str_c("Quarter ", as.character(quarter(date)))) %>%
plot(
.date_var = date,
.value = dailycount,
.facet_vars = quarter,
.facet_ncol = 4,
.color_var = quarter,
.facet_scales = "fixed",
.interactive = FALSE,
.legend_show = FALSE)
eliz_seasonal <- pageviews_nogaps %>%
filter(type == "Elizabeth_II") %>%
gg_season(y = dailycount)
eliz_seasonal
library(feast)
library(feasts)
library(feasts)
eliz_seasonal <- pageviews_nogaps %>%
filter(type == "Elizabeth_II") %>%
gg_subseries(y = dailycount)
#ggplotly(season_plot) %>%
#config(displayModeBar = T)
eliz_seasonal
pageviews_ts %>% filter(type == "Elizabeth_II") %>% ggplot(mapping = aes(date, dailycount)) + geom_line()
pageviews_ts %>% filter(type == "2016_Summer_Olympics") %>% ggplot(mapping = aes(date, dailycount)) + geom_line()
summary(pageviews_ts$date)
length(pageviews_ts$type)
type <- as.factor(type)
length(type
f
length(type)
levels(type)
length(type9
f
length(type)
modified_ts <- pageviews_ts
modified_ts$type[1]
modified_ts$type[1][1]
modified_ts$dailycount[1]
View(modified_ts)
modified_ts$type[modified_ts$dailycount[1]][1]
modified_ts$dailycount[modified_ts$type[2]][1]
library(here)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(fpp3)
# Read in the data
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
# Create new column
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
# Add new column
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
# Pivot data frame
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, format = "%Y-%m-%d")
# Convert into tsibble
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount)) # since duplicates need to keys
# str(pageviews_ts) # to verify the structure of dataframe
View(pageviews_ts)
View(pageviews)
type
library(plotly)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  +
theme_economist_white() # we can change the theme for something cooler ?
library(plotly)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  +
#theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
library(plotly)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  #+
#theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
# NEED IMPROVEMENT UNREADABLE
View(pageviews)
modified_ts$dailycount[1]
type <- as.factor(type)
# Create a modified time series using the initial one
modified_ts <- pageviews_ts
ind <- 1
modified_ts$dailycount[1]
modified_ts$dailycount[[1]]
modified_ts <- pageviews_ts
ind <- 1
for (i in levels(type)) {
for (j in 1:length(levels(pageviews_ts$type))) {
if (j > 7) {
modified_ts$dailycount[i] <- ((pageviews_ts[j] -  pageviews_ts[j-7])/pageviews_ts[j-7])*100
} else {
modified_ts$dailycount[i] <- "NA"
}
ind <- ind + 1
}
}
modified_ts <- pageviews_ts
ind <- 1
for (i in levels(type)) {
for (j in 1:length(levels(pageviews_ts$type))) {
if (j > 7) {
modified_ts$dailycount[i] <- ((pageviews_ts$dailycount[j] -  pageviews_ts$dailycount[j-7])/pageviews_ts$dailycount[j-7])*100
} else {
modified_ts$dailycount[i] <- "NA"
}
ind <- ind + 1
}
}
str(modified_ts)
modified_ts <- pageviews_ts
ind <- 1
for (i in levels(type)) {
for (j in 1:length(levels(pageviews_ts$type))) {
if (j > 7) {
modified_ts$dailycount[i] <- ((pageviews_ts$dailycount[j] -  pageviews_ts$dailycount[j-7])/pageviews_ts$dailycount[j-7])*100
} else {
modified_ts$dailycount[i] <- NA
}
ind <- ind + 1
}
}
length(levels(pageviews_ts$type))
type <- as.factor(type)
levels(type)
subset_type <- pageviews_ts %>%
filter(type == i)
modified_ts <- pageviews_ts
ind <- 1
for (i in levels(type)) {
subset_type <- pageviews_ts %>%
filter(type == i)
for (j in 1:nrow(subset_type)) {
if (j > 7) {
modified_ts$dailycount[i] <- ((subset_type$dailycount[j] -  subset_type$dailycount[j-7])/subset_type$dailycount[j-7])*100
} else {
modified_ts$dailycount[i] <- NA
}
ind <- ind + 1
}
}
type <- as.factor(type)
# Create a modified time series using the initial one
modified_ts <- pageviews_ts
ind <- 1
for (i in levels(type)) {
subset_type <- pageviews_ts %>%
filter(type == i)
for (j in 1:nrow(subset_type)) {
if (j > 7) {
modified_ts$dailycount[[i]] <- ((subset_type$dailycount[[j]] -  subset_type$dailycount[[j-7]])/subset_type$dailycount[[j-7]])*100
} else {
modified_ts$dailycount[[i]] <- NA
}
ind <- ind + 1
}
}
View(subset_type)
modified_ts <- pageviews_ts
ind <- 1
for (i in levels(type)) {
subset_type <- pageviews_ts %>%
filter(type == i)
for (j in 1:nrow(subset_type)) {
if (j > 7) {
modified_ts$dailycount[ind] <- ((subset_type$dailycount[j] -  subset_type$dailycount[j-7])/subset_type$dailycount[j-7])*100
} else {
modified_ts$dailycount[i] <- NA
}
ind <- ind + 1
}
}
modified_ts <- pageviews_ts
ind <- 1
for (i in levels(type)) {
subset_type <- pageviews_ts %>%
filter(type == i)
for (j in 1:nrow(subset_type)) {
if (j > 7) {
modified_ts$dailycount[ind] <- ((subset_type$dailycount[j] -  subset_type$dailycount[j-7])/subset_type$dailycount[j-7])*100
} else {
modified_ts$dailycount[ind] <- NA
}
ind <- ind + 1
}
}
modified_ts$dailycount <- rename(modified_ts,
"daily count modified" = "dailycount")
View(modified_ts)
type <- as.factor(type)
# Create a modified time series using the initial one
modified_ts <- pageviews_ts
ind <- 1
for (i in levels(type)) {
subset_type <- pageviews_ts %>%
filter(type == i)
for (j in 1:nrow(subset_type)) {
if (j > 7) {
modified_ts$dailycount[[ind] ]<- ((subset_type$dailycount[[j]] -  subset_type$dailycount[[j-7]])/subset_type$dailycount[[j-7]])*100
} else {
modified_ts$dailycount[[ind]] <- NA
}
ind <- ind + 1
}
}
modified_ts$dailycount <- rename(modified_ts,
"daily count modified" = "dailycount")
View(modified_ts)
modified_ts <- rename(modified_ts,
"daily count modified" = "dailycount")
type <- as.factor(type)
# Create a modified time series using the initial one
modified_ts <- pageviews_ts
ind <- 1
for (i in levels(type)) {
subset_type <- pageviews_ts %>%
filter(type == i)
for (j in 1:nrow(subset_type)) {
if (j > 7) {
modified_ts$dailycount[[ind]] <- ((subset_type$dailycount[[j]] -  subset_type$dailycount[[j-7]])/subset_type$dailycount[[j-7]])*100
} else {
modified_ts$dailycount[[ind]] <- NA
}
ind <- ind + 1
}
}
modified_ts <- rename(modified_ts,
"daily count modified" = "dailycount")
View(modified_ts)
