# Adds the mode: most occurring value
#geom_vline(aes(xintercept = Mode(niveau.ts$Wert)),
#col = 'aquamarine2') +
# Adds the mean
geom_vline(xintercept = mean(niveau.ts$Wert),
col = "aquamarine3",
lwd = 1) +
# Adds the median
geom_vline(xintercept = median(niveau.ts$Wert),
col = "aquamarine4",
lwd = 1) +
labs(title = "Frequency of daily water level maxima",
subtitle = "From 2000 to 2021",
x = "Daily water level maxima [meter above sea]",
y = "Frequency") +
# Adds legend
theme(legend.position="right")
return.level(gpd,
return.period = c(50, 100))
library(here)
# Read in the data
load(file = here::here("niveau.Rdata"))
library(lubridate)
library(tibble)
library(tsibble)
library(fpp3)
library(kableExtra)
# Convert column 8 into date type
niveau <- niveau %>%
mutate(Zeitpunkt_des_Auftretens = as_datetime(Zeitpunkt_des_Auftretens))
#niveau$Zeitpunkt_des_Auftretens[1]
# Transform into tibble
niveau.ts <- niveau %>%
as_tsibble(index = Zeitpunkt_des_Auftretens,
key = Zeitstempel)
head(niveau.ts, 6) %>%
kbl(align = c('c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c')) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = F)
library(plotly)
library(ggthemes)
# Plot the time series
time_series <- niveau.ts %>%
ggplot(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert,)) +
geom_line() +
# Add the smoothed trend
stat_smooth(color = "cyan4") +
labs(title = "Daily Maximum Water Levels (in m.a.s.l) in Stilli",
caption = "source: niveau.Rdata", # [the caption doesn't appear !!!]
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")  +
theme_economist_white()
ggplotly(time_series) %>%
config(displayModeBar = F)
summary(niveau.ts$Wert)
# Histogram
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert),
stat = "density",
colour = "cornflowerblue") +
theme_economist_white() +
# Adds the mode: most occurring value
#geom_vline(aes(xintercept = Mode(niveau.ts$Wert)),
#col = 'aquamarine2') +
# Adds the mean
geom_vline(xintercept = mean(niveau.ts$Wert),
col = "aquamarine3",
lwd = 1) +
# Adds the median
geom_vline(xintercept = median(niveau.ts$Wert),
col = "aquamarine4",
lwd = 1) +
labs(title = "Frequency of daily water level maxima",
subtitle = "From 2000 to 2021",
x = "Daily water level maxima [meter above sea]",
y = "Frequency") +
# Adds legend
theme(legend.position="right")
library(extRemes)
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(niveau.ts$Wert,
main = "Mean Residual Life Plot: Mean Excess Function")
# [MAYBE ADD A VERTICAL LINE AT 327]
# Assign the threshold value to a threshold object
threshold <- 327 # 327 as Threshold looks better than 326
# Plot of Peak-over-Threshold
pot <- plot(x = rep(1:7883,
each = 1),
y = unlist(niveau.ts$Wert),
main = "Peak-Over-Threshold plot: Exceedances",
sub = paste("threshold =", threshold),
xlab = "Observations",
ylab = "Threshold")
pot_points <- unlist(niveau.ts$Wert) > threshold
points(x = rep(1:7883, each = 1)[pot_points],
y = unlist(niveau.ts$Wert)[pot_points],
col = "red")
abline(h = threshold, col = "red")
#ggplotly(plot) %>%
#config(displayModeBar = F)   [CAN WE MAKE THIS PLOT INTERACTIVE ?]
# Decluster
decluster <- extRemes::decluster(niveau$Wert,
threshold = 327)
decluster
#summary(decluster)
plot(decluster,
main = "Declustering of exceedances", # title doesnt appear
ylab ="Water Level Values",
xlab = "Observations")
# Decluster
decluster <- extRemes::decluster(niveau$Wert,
threshold = 327)
decluster
plot(x = rep(1:7883, each = 1),
y = decluster,
main = "Declustering of exceedances", # title doesnt appear
sub = paste("threshold =", threshold),
xlab = "Observations",
ylab ="Water Level Values")
abline(h = threshold)
# Log return
ret <- diff(log(niveau.ts$Wert))
plot(niveau.ts$Zeitpunkt_des_Auftretens[-1],
100*ret,
type ="l",
main = "Log-returns over time (POT approach)",
xlab ="Time",
ylab ="Negative log-return in %", # why negative ?
col = 1) +
points(niveau.ts$Zeitpunkt_des_Auftretens[-1],
100*ret,
col = 2,
cex = 0.1)
# Fit an extreme value distribution to data
gpd <- extRemes::fevd(unlist(decluster),
threshold = threshold,
type = "GP") # To corect ! which one should we choose
plot(gpd,
type = "density",
main = "Empirical POT vs estimated GPD")
return.level(gpd,
return.period = c(50, 100))
niveau.ts$year <- floor_date(niveau.ts$Zeitpunkt_des_Auftretens, "year") # Fct that convert data
niveau.ts2 <- niveau.ts %>%
group_by(year) %>%
summarize(mean = mean(niveau.ts$Wert)) # Compute mean of water levels for yearly data
decluster2 <- extRemes::decluster(niveau.ts2$mean,
threshold = 327)
gpd2 <- extRemes::fevd(unlist(decluster2),
threshold = threshold,
type = "GP")   # PB HERE
library(here)
library(quantmod)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(plotly)
library(tidyquant)
# Read in the data
load(file = here::here("traffic.Rdata"))
View(time_series)
view(as_tsibble(time_series))
view(as_tibble(time_series))
plot(time_series)
library(here)
library(quantmod)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(plotly)
library(tidyquant)
# Read in the data
load(file = here::here("traffic.Rdata"))
View(pageviews)
pageviews <- t(pageviews)
View(pageviews)
library(here)
library(quantmod)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(plotly)
library(tidyquant)
# Read in the data
load(file = here::here("traffic.Rdata"))
pageviews_t <- t(pageviews)
View(pageviews)
autoplot(pageviews)
pageviews <- as_tibble(pageviews)
pageviews <- as_tsibble(pageviews)
View(pageviews)
Date <- pageviews[,]
Date <- pageviews[:]
x <- pageviews %>%
pivot_longer(!pageviews[1],
names_to = "Date",
values_to = "Daily Count")
x <- pageviews %>%
pivot_longer(!pageviews[,1],
names_to = "Date",
values_to = "Daily Count")
typeof(pageviews$`2015-07-01`)
pageviews %>% select(all) %>% as.numeric()
pageviews %>% select(1:803) %>% as.numeric()
as.numeric(pageviews)
pageviews %>% select() %>% as.numeric()
x <- pageviews %>%
pivot_longer(!pageviews[,1],
names_to = "Date",
values_to = "Daily Count")
# Convert into tibble
pageviews <- as_tibble(pageviews)
pageviews %>% select(1:803)
# Convert column to numeric type
pageviews <- pageviews %>%
select(1:803) %>%
as.numeric()
pageviews <- pageviews %>%
select(1:803) %>%
as.numeric(unlist())
pageviews <- pageviews %>%
select(1:803) %>%
as.numeric(unlist(pageviews[, 1:803]))
as.numeric(unlist(pageviews %>% select(1:803)))
pageviews %>%
select(1:803)
x <- pageviews %>%
pivot_longer(cols = starts_with("20"),
names_to = "date",
names_prefix = "20",
values_to = "daily count")
View(x)
View(pageviews)
# Read in the data
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
View(pageviews)
load(file = here::here("traffic.Rdata"))
View(pageviews)
x <- pageviews %>%
pivot_longer(cols = starts_with("20"),
names_to = "date",
names_prefix = "20",
values_to = "daily count")
View(x)
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
pageviews <- cbind(pageviews,
type)
View(pageviews)
# Reorder colum
col_order <- pageviews[, c(804, 1:803)]
View(col_order)
pageviews <- pageviews[, c(804, 1:803)]
View(pageviews)
y <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
View(y)
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
View(pageviews)
pageviews %>%
ggplot() +
geom_bar(mapping = aes(x = type,
y = frequency),
stat = "count")
pageviews %>%
ggplot() +
geom_bar(mapping = aes(x = type),
stat = "count")
type_freq <- pageviews %>%
group_by(type) %>%
summarise(count_sum = sum(),
mean = mean())
type_freq <- pageviews %>%
group_by(type) %>%
summarise(count_sum = sum(),
mean = mean(dailycount))
View(type_freq)
type_freq <- pageviews %>%
group_by(type) %>%
summarise(n = n(),
mean = mean(dailycount))
View(type_freq)
sum(pageviews[1, ])
str(pageviews)
# Convert into tsibble
pageviews_ts <- tsibble(pageviews, index = date)
typeof
typeof(pageviews$date)
?as.Date
pageviews$date <- as.Date(pageviews$date, "%y/%m/%d")
# Convert into tsibble
pageviews_ts <- tsibble(pageviews, index = date)
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, "%y/%m/%d")
pageviews$date
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
# Create new column
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
# Add new column
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
# Pivot data frame
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, format = "%Y-%m-%d")
pageviews$date
# Convert into tsibble
pageviews_ts <- tsibble(pageviews, index = date)
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount))
View(pageviews_ts)
str(pageviews_ts)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
group = type)) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count")  +
theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
group = type)) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  +
theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  +
theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T)
season_plot <- pageviews_ts %>%
gg_season(y = dailycount)
library(tsibble)
pageviews_nogaps <- fill_gaps(pageviews_ts)
pageviews_nogaps <- pageviews_ts %>%
fill_gaps()
library(here)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(fpp3)
# Read in the data
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
# Create new column
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
# Add new column
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
# Pivot data frame
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, format = "%Y-%m-%d")
# Convert into tsibble
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount)) # since duplicates need to keys
# str(pageviews_ts) # to verify the structure of dataframe
library(plotly)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  +
theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
# NEED IMPROVEMENT UNREADABLE
library(tsibble)
# Fill time gaps
pageviews_nogaps <- pageviews_ts %>%
fill_gaps()
# Seasonal plot
season_plot <- pageviews_nogaps %>%
gg_season(y = dailycount)
ggplotly(season_plot) %>%
config(displayModeBar = T)
season_plot
sub_series_SummerOlymp <- pageviews_nogaps %>%
mutate(quarter = str_c("Quarter ", as.character(quarter(date)))) %>%
plot_time_series(
.date_var = date,
.value = dailycount,
.facet_vars = quarter,
.facet_ncol = 4,
.color_var = quarter,
.facet_scales = "fixed",
.interactive = FALSE,
.legend_show = FALSE)
sub_series_SummerOlymp <- pageviews_nogaps %>%
filter(type == "2016_Summer_Olympics") %>%
mutate(quarter = str_c("Quarter ", as.character(quarter(date)))) %>%
plot(
.date_var = date,
.value = dailycount,
.facet_vars = quarter,
.facet_ncol = 4,
.color_var = quarter,
.facet_scales = "fixed",
.interactive = FALSE,
.legend_show = FALSE)
eliz_seasonal <- pageviews_nogaps %>%
filter(type == "Elizabeth_II") %>%
gg_season(y = dailycount)
eliz_seasonal
library(feast)
library(feasts)
library(feasts)
eliz_seasonal <- pageviews_nogaps %>%
filter(type == "Elizabeth_II") %>%
gg_subseries(y = dailycount)
#ggplotly(season_plot) %>%
#config(displayModeBar = T)
eliz_seasonal
pageviews_ts %>% filter(type == "Elizabeth_II") %>% ggplot(mapping = aes(date, dailycount)) + geom_line()
pageviews_ts %>% filter(type == "2016_Summer_Olympics") %>% ggplot(mapping = aes(date, dailycount)) + geom_line()
summary(pageviews_ts$date)
length(pageviews_ts$type)
type <- as.factor(type)
length(type
f
length(type)
levels(type)
length(type9
f
length(type)
modified_ts <- pageviews_ts
modified_ts$type[1]
modified_ts$type[1][1]
modified_ts$dailycount[1]
View(modified_ts)
modified_ts$type[modified_ts$dailycount[1]][1]
modified_ts$dailycount[modified_ts$type[2]][1]
