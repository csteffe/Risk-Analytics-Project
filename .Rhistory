stat = "count")
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert), stat = "density", colour = "red")
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert), stat = "density", colour = "red") +
# Adds the mean on the plot
geom_vline(aes(xintercept = mean(Wert)),
col = 'red',
size = 2)
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert), stat = "density", colour = "red") +
# Adds the mean on the plot
geom_vline(aes(xintercept = mean(Wert)),
col = 'red',
size = 1) +
# Add text for mean
annotate("text",
x = mean(Wert) * 1.7,
y = mean(Wert) * 1.7,
label = paste("Mean =", mean(Wert)),
col = "red",
size = 8)
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert), stat = "density", colour = "red") +
# Adds the mean on the plot
geom_vline(aes(xintercept = mean(Wert)),
col = 'red',
size = 1) +
# Add text for mean
annotate("text",
label = paste("Mean =", mean(Wert)),
col = "red",
size = 8)
# Histogram
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert), stat = "density", colour = "red") +
# Adds the mean on the plot
geom_vline(aes(xintercept = mean(Wert)),
col = 'red',
size = 1) +
labs(title = "Water Levels Frequencies",
x = "Value",
y = "Frequency")
# Histogram
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert), stat = "density", colour = "red") +
labs(title = "Water Levels Frequencies",
x = "Value",
y = "Frequency")
# Histogram
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert), stat = "density", colour = "red") +
# Adds the mode
geom_vline(xintercept = mode(Wert),
col = "blue",
lwd = 1) +
# Adds the mean
geom_vline(xintercept = mean(Wert),
col = "green",
lwd = 1) +
# Adds the median
geom_vline(xintercept = median(Wert),
col = "purple",
lwd = 1) +
labs(title = "Water Levels Frequencies",
x = "Value",
y = "Frequency")
# Histogram
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert), stat = "density", colour = "red") +
# Adds the mode
geom_vline(xintercept = mode(niveau.ts$Wert),
col = "blue",
lwd = 1) +
# Adds the mean
geom_vline(xintercept = mean(niveau.ts$Wert),
col = "green",
lwd = 1) +
# Adds the median
geom_vline(xintercept = median(niveau.ts$Wert),
col = "purple",
lwd = 1) +
labs(title = "Water Levels Frequencies",
x = "Value",
y = "Frequency")
mode(niveau.ts$Wert)
mean(niveau.ts$Wert)
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert), stat = "density", colour = "red") +
# Adds the mode
geom_vline(xintercept = mode(niveau.ts$Wert),
col = "blue",
lwd = 1)
# Histogram
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert), stat = "density", colour = "red") +
# Adds the mode
#geom_vline(xintercept = mode(niveau.ts$Wert),
#col = "blue",
#lwd = 1) +
# Adds the mean
geom_vline(xintercept = mean(niveau.ts$Wert),
col = "green",
lwd = 1) +
# Adds the median
geom_vline(xintercept = median(niveau.ts$Wert),
col = "purple",
lwd = 1) +
labs(title = "Water Levels Frequencies",
x = "Value",
y = "Frequency")
summary(niveau.ts$Zeitpunkt_des_Auftretens)
library(here)
# Read in the data
load(file = here::here("niveau.Rdata"))
library(lubridate)
library(tibble)
library(tsibble)
library(fpp3)
# Convert column 8 into date type
niveau <- niveau %>%
mutate(Zeitpunkt_des_Auftretens = as_datetime(Zeitpunkt_des_Auftretens))
#niveau$Zeitpunkt_des_Auftretens[1]
# Transform into tibble
niveau.ts <- niveau %>%
as_tsibble(index = Zeitpunkt_des_Auftretens,
key = Zeitstempel)
library(lubridate)
library(tibble)
library(tsibble)
library(fpp3)
# Convert column 8 into date type
niveau <- niveau %>%
mutate(Zeitpunkt_des_Auftretens = as_datetime(Zeitpunkt_des_Auftretens))
#niveau$Zeitpunkt_des_Auftretens[1]
# Transform into tibble
niveau.ts <- niveau %>%
as_tsibble(index = Zeitpunkt_des_Auftretens,
key = Zeitstempel)
head(niveau.ts, 10) %>%
kbl(align = c('c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c')) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = F)
library(kableExtra)
head(niveau.ts, 10) %>%
kbl(align = c('c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c')) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = F)
decluster <- decluster(niveau$Wert,
threshold = 327)
decluster <- extRemes::decluster(niveau$Wert,
threshold = 327)
decluster
summary(decluster)
decluster
gpd <- fevd(unlist(decluster),
threshold = threshold,
type = "GP")
gpd <- extRemes::fevd(unlist(decluster),
threshold = threshold,
type = "GP")
threshold <- 327 # 327 as Threshold looks better than 326
gpd <- extRemes::fevd(unlist(decluster),
threshold = threshold,
type = "GP")
View(gpd)
plot(gpd,
type = "density",
main = "Empirical POT vs estimated GPD")
attributes(decluster)$cluster
extreme <- niveau.ts %>% filter(niveau.ts$Wert > 327)
attributes(decluster)
library(plotly)
# Plot the time series
time_series <- niveau.ts %>%
ggplot() +
geom_line(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert)) +
+ stat_smooth(color = "#FC4E07",
fill = "#FC4E07",
method = "loess") +
labs(title = "Daily Water Levels (m.a.s.l) in Stilli",
subtitle = "Daily maximal value",
caption = "source: niveau.Rdata",
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")
library(plotly)
# Plot the time series
time_series <- niveau.ts %>%
ggplot() +
geom_line(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert)) +
stat_smooth(color = "#FC4E07",
fill = "#FC4E07",
method = "loess") +
labs(title = "Daily Water Levels (m.a.s.l) in Stilli",
subtitle = "Daily maximal value",
caption = "source: niveau.Rdata",
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")
ggplotly(time_series) %>% config(displayModeBar = F)
library(plotly)
# Plot the time series
time_series <- niveau.ts %>%
ggplot(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert)) +
geom_line() +
stat_smooth(color = "#FC4E07",
fill = "#FC4E07",
method = "loess") +
labs(title = "Daily Water Levels (m.a.s.l) in Stilli",
subtitle = "Daily maximal value",
caption = "source: niveau.Rdata",
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")
ggplotly(time_series) %>% config(displayModeBar = F)
library(plotly)
# Plot the time series
time_series <- niveau.ts %>%
ggplot(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert)) +
geom_line() +
stat_smooth(color = "green") +
labs(title = "Daily Water Levels (m.a.s.l) in Stilli",
subtitle = "Daily maximal value",
caption = "source: niveau.Rdata",
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")
ggplotly(time_series) %>% config(displayModeBar = F)
library(plotly)
# Plot the time series
time_series <- niveau.ts %>%
ggplot(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert)) +
geom_line() +
# Add the smoothed trend
stat_smooth(color = "green") +
labs(title = "Daily Maximum Water Levels (m.a.s.l) in Stilli",
subtitle = "Daily maximal value",
caption = "source: niveau.Rdata",
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")
ggplotly(time_series) %>% config(displayModeBar = F)
# Histogram
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert), stat = "density", colour = "red") +
# Adds the mode
#geom_vline(xintercept = mode(niveau.ts$Wert),
#col = "blue",
#lwd = 1) +
# Adds the mean
geom_vline(xintercept = mean(niveau.ts$Wert),
col = "green",
lwd = 1) +
# Adds the median
geom_vline(xintercept = median(niveau.ts$Wert),
col = "purple",
lwd = 1) +
labs(title = "Water Levels Frequencies",
x = "Water Level Value [meter above sea]",
y = "Frequency") +
# Adds legend
theme(legend.position="right")
library(extRemes)
# Plot mean residual life (MRL)
extRemes::mrlplot(niveau.ts$Wert,)
#+ labs(title = "Mean Residual Life Plot",
#caption = "source: niveau.Rdata")
library(extRemes)
# Plot mean residual life (MRL)
extRemes::mrlplot(niveau.ts$Wert,)
#+ labs(title = "Mean Residual Life Plot",
#caption = "source: niveau.Rdata")
library(extRemes)
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(niveau.ts$Wert,)
#+ labs(title = "Mean Residual Life Plot",
#caption = "source: niveau.Rdata")
# [ADD A VERTICAL LINE AT 327 TO SHOW THE DIFFERENCE OF THE LINE FROM CURVE TO LINEAR!]
library(extRemes)
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(niveau.ts$Wert,)
#+ labs(title = "Mean Residual Life Plot",
#caption = "source: niveau.Rdata")
# [ADD A VERTICAL LINE AT 327 TO SHOW THE DIFFERENCE OF THE LINE FROM CURVE TO LINEAR!]
# Assign the threshold value to a threshold object
threshold <- 327 # 327 as Threshold looks better than 326
# Plot of Peak-over-Threshold
plot(x = rep(1:7883, each = 1),
y = unlist(niveau.ts$Wert),
main = "Peaks Over Thresholds",
sub = paste("threshold =", threshold),
xlab = "series",
ylab = "Water Level Values")
pot_points <- unlist(niveau.ts$Wert) > threshold
points(x = rep(1:7883, each = 1)[pot_points],
y = unlist(niveau.ts$Wert)[pot_points],
col = "red")
abline(h = threshold, col = "red")
# Assign the threshold value to a threshold object
threshold <- 327 # 327 as Threshold looks better than 326
# Plot of Peak-over-Threshold
plot(x = rep(1:7883, each = 1),
y = unlist(niveau.ts$Wert),
main = "Peaks over Threshold",
sub = paste("threshold =", threshold),
xlab = "series",
ylab = "Threshold $\mu$")
# Assign the threshold value to a threshold object
threshold <- 327 # 327 as Threshold looks better than 326
# Plot of Peak-over-Threshold
plot(x = rep(1:7883, each = 1),
y = unlist(niveau.ts$Wert),
main = "Peaks over Threshold",
sub = paste("threshold =", threshold),
xlab = "series",
ylab = "Threshold")
pot_points <- unlist(niveau.ts$Wert) > threshold
points(x = rep(1:7883, each = 1)[pot_points],
y = unlist(niveau.ts$Wert)[pot_points],
col = "red")
abline(h = threshold, col = "red")
# Log return
ret <- diff(log(niveau.ts$Wert))
plot(niveau.ts$Zeitpunkt_des_Auftretens[-1],
100*ret,
type ="l",
main = "log return over time",
xlab ="Time",
ylab ="log return in %",
col = 1) +
points(niveau.ts$Zeitpunkt_des_Auftretens[-1],
100*ret,
col = 2,
cex = 0.1)
# Assign the threshold value to a threshold object
threshold <- 327 # 327 as Threshold looks better than 326
# Plot of Peak-over-Threshold
plot(x = rep(1:7883, each = 1),
y = unlist(niveau.ts$Wert),
main = "Peaks over Threshold",
sub = paste("threshold =", threshold),
xlab = "series",
ylab = "Threshold")
pot_points <- unlist(niveau.ts$Wert) > threshold
points(x = rep(1:7883, each = 1)[pot_points],
y = unlist(niveau.ts$Wert)[pot_points],
col = "red")
abline(h = threshold, col = "red")
# Assign the threshold value to a threshold object
threshold <- 327 # 327 as Threshold looks better than 326
# Plot of Peak-over-Threshold
pot <- plot(x = rep(1:7883, each = 1),
y = unlist(niveau.ts$Wert),
main = "Peaks over Threshold",
sub = paste("threshold =", threshold),
xlab = "series",
ylab = "Threshold")
pot_points <- unlist(niveau.ts$Wert) > threshold
points(x = rep(1:7883, each = 1)[pot_points],
y = unlist(niveau.ts$Wert)[pot_points],
col = "red")
abline(h = threshold, col = "red")
ggplotly(pot) %>%
config(displayModeBar = F)
ggplotly(pot)
# Assign the threshold value to a threshold object
threshold <- 327 # 327 as Threshold looks better than 326
# Plot of Peak-over-Threshold
pot <- plot(x = rep(1:7883, each = 1),
y = unlist(niveau.ts$Wert),
main = "Peaks over Threshold",
sub = paste("threshold =", threshold),
xlab = "series",
ylab = "Threshold")
pot_points <- unlist(niveau.ts$Wert) > threshold
points(x = rep(1:7883, each = 1)[pot_points],
y = unlist(niveau.ts$Wert)[pot_points],
col = "red")
abline(h = threshold, col = "red")
ggplotly(pot) %>%
config(displayModeBar = F)
# Assign the threshold value to a threshold object
threshold <- 327 # 327 as Threshold looks better than 326
# Plot of Peak-over-Threshold
pot <- plot(x = rep(1:7883,
each = 1),
y = unlist(niveau.ts$Wert),
main = "Peaks over Threshold",
sub = paste("threshold =", threshold),
xlab = "series",
ylab = "Threshold")
pot_points <- unlist(niveau.ts$Wert) > threshold
points(x = rep(1:7883, each = 1)[pot_points],
y = unlist(niveau.ts$Wert)[pot_points],
col = "red")
abline(h = threshold, col = "red")
#ggplotly(pot) %>%
#config(displayModeBar = F)   [CAN WE MAKE THIS PLOT INTERACTIVE ?]
# Assign the threshold value to a threshold object
threshold <- 327 # 327 as Threshold looks better than 326
# Plot of Peak-over-Threshold
pot <- plot(x = rep(1:7883,
each = 1),
y = unlist(niveau.ts$Wert),
main = "Peaks over Threshold",
sub = paste("threshold =", threshold),
xlab = "series",
ylab = "Threshold")
pot_points <- unlist(niveau.ts$Wert) > threshold
points(x = rep(1:7883, each = 1)[pot_points],
y = unlist(niveau.ts$Wert)[pot_points],
col = "red")
abline(h = threshold, col = "red")
#ggplotly(pot) %>%
#config(displayModeBar = F)   [CAN WE MAKE THIS PLOT INTERACTIVE ?]
# Log return
ret <- diff(log(niveau.ts$Wert))
plot(niveau.ts$Zeitpunkt_des_Auftretens[-1],
100*ret,
type ="l",
main = "log return over time",
xlab ="Time",
ylab ="log return in %",
col = 1) +
points(niveau.ts$Zeitpunkt_des_Auftretens[-1],
100*ret,
col = 2,
cex = 0.1)
ret <- diff(log(niveau.ts$Wert))
# Log return
ret <- diff(log(niveau.ts$Wert))
# GPD: 1st way of using Peak-over-Threshold data
gpd <- extRemes::fevd(unlist(decluster),
threshold = threshold,
type = "GP")
plot(gpd,
type = "density",
main = "Empirical POT vs estimated GPD")
install.packages("evir")
library(evir)
View(niveau.ts)
gpd2 <- gpd(data = niveau.ts$Wert,
threshold = 327)
View(gpd2)
# GPD: 1st way of using Peak-over-Threshold data
gpd <- extRemes::fevd(unlist(decluster),
threshold = threshold,
type = "GP")
library(evir)
# Fit GPD model and returns a gpd object
gpd2 <- gpd(data = niveau.ts$Wert,
threshold = 327)
plot(gpd,
type = "density",
main = "Empirical POT vs estimated GPD")
plot(gpd2)
# GPD: 1st way of using Peak-over-Threshold data
gpd <- extRemes::fevd(unlist(decluster),
threshold = threshold,
type = "GP")
library(evir)
# Fit GPD model and returns a gpd object
gpd2 <- gpd(data = niveau.ts$Wert,
threshold = 327)
plot(gpd,
type = "density",
main = "Empirical POT vs estimated GPD")
plot(gpd2)
