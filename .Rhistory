View(modified_ts)
modifiedts_plot <- modified_ts %>%
ggplot(mapping = aes(x = date,
y = `daily count modified`,
colour = factor(type))) +
geom_line() +
labs(title = "Modified Time Series: Web Traffic",
x = "Time of Occurrence [1D]",
y = "Modified Daily count",
fill = type)  +
theme_economist_white() # we can change the theme for something cooler ?
View(pageviews_ts)
View(modified_ts)
library(ggthemes)
modifiedts_plot <- modified_ts %>%
ggplot(mapping = aes(x = date,
y = `daily count modified`,
colour = factor(type))) +
geom_line() +
labs(title = "Modified Time Series: Web Traffic",
x = "Time of Occurrence [1D]",
y = "Modified Daily count",
fill = type)  +
theme_economist_white() # we can change the theme for something cooler ?
ggplotly(modifiedts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
# NEED IMPROVEMENT UNREADABLE
library(here)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(fpp3)
# Read in the data
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
# Create new column
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
# Add new column
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
# Pivot data frame
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, format = "%Y-%m-%d")
# Convert into tsibble
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount)) # since duplicates need to keys
# str(pageviews_ts) # to verify the structure of dataframe
library(plotly)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  #+
#theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
# NEED IMPROVEMENT UNREADABLE
library(tsibble)
# Fill time gaps
pageviews_nogaps <- pageviews_ts %>%
fill_gaps()
library(feasts)
# Seasonal plot
eliz_seasonal <- pageviews_nogaps %>%
filter(type == "Elizabeth_II") %>%
gg_season(y = dailycount)
# Subseries
eliz_sub <- pageviews_nogaps %>%
filter(type == "Elizabeth_II") %>%
gg_subseries(y = dailycount)
# pour chaque "type" on crée une time series modifiée "modified_ts" pour lesquelles on recalcules la valeur de daily count en utilisant la formule du dessus. etant donné qu'on a - Xi-7 on peut que commencer à calculer pour la 8ème observation de chaque time series (1 par type)
type <- as.factor(type)
# Create a modified time series using the initial one
modified_ts <- pageviews_ts
ind <- 1
for (i in levels(type)) {
subset_type <- pageviews_ts %>%
filter(type == i)
for (j in 1:nrow(subset_type)) {
if (j > 7) {
modified_ts$dailycount[[ind]] <- ((subset_type$dailycount[[j]] -  subset_type$dailycount[[j-7]])/subset_type$dailycount[[j-7]])*100
} else {
modified_ts$dailycount[[ind]] <- NA
}
ind <- ind + 1
}
}
modified_ts <- rename(modified_ts,
"daily count modified" = "dailycount")
modifiedts_plot <- modified_ts %>%
ggplot(mapping = aes(x = date,
y = `daily count modified`,
colour = factor(type))) +
geom_line() +
labs(title = "Modified Time Series: Web Traffic",
x = "Time of Occurrence [1D]",
y = "Modified Daily count",
fill = type)  +
theme_economist_white() # we can change the theme for something cooler ?
ggplotly(modifiedts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
# NEED IMPROVEMENT UNREADABLE
# Binding the modified daily count to have everything in the same place
ts <- cbind(pageviews_ts,
modified_ts)
# qqplot by types ( two ways)
#facet_wrap
ggplot(data = ts, aes(sample = `daily count modified`)) +
geom_qq(color = "pink") +
geom_qq_line(color = "dark green",scales = "free") +
labs(y = "daily count modified") +
facet_wrap(~type)
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount)) %>% # since duplicates need to keys
group_by(type) %>%
arrange(date)
View(pageviews_ts)
library(here)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(fpp3)
# Read in the data
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
# Create new column
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
# Add new column
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
# Pivot data frame
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, format = "%Y-%m-%d")
# Convert into tsibble
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount)) %>% # since duplicates need to keys
arrange(date, type)
# str(pageviews_ts) # to verify the structure of dataframe
View(pageviews_ts)
library(here)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(fpp3)
# Read in the data
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
# Create new column
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
# Add new column
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
# Pivot data frame
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, format = "%Y-%m-%d")
# Convert into tsibble
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount)) %>% # since duplicates need to keys
group_by(date, type) %>%
arrange(date, type)
library(here)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(fpp3)
# Read in the data
load(file = here::here("traffic.Rdata"))
# Convert into tibble
pageviews <- as_tibble(pageviews)
# Create new column
type <- c("Elizabeth_II",
"United_States",
"Queen_Victoria",
"World_War_II",
"World_War_I",
"George_VI",
"United_Kingdom",
"Princess_Margaret,_Countess_of_Snowdon",
"Prince_Philip,_Duke_of_Edinburgh",
"Winston_Churchill",
"Diana,_Princess_of_Wales",
"2016_Summer_Olympics")
# Add new column
pageviews <- cbind(pageviews,
type)
# Reorder colum
pageviews <- pageviews[, c(804, 1:803)]
# Pivot data frame
pageviews <- pageviews %>%
pivot_longer(!type,
names_to = "date",
values_to = "dailycount")
# Convert column date into date format
pageviews$date <- as.Date(pageviews$date, format = "%Y-%m-%d")
# Convert into tsibble
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount)) %>% # since duplicates need to keys
group_by(type) %>%
arrange(date)
# str(pageviews_ts) # to verify the structure of dataframe
View(pageviews_ts)
?order
pageviews_ts <- tsibble(pageviews,
index = date,
key = c(type, dailycount)) %>% # since duplicates need to keys
arrange(type, date)
View(pageviews_ts)
library(plotly)
ts_plot <- pageviews_ts %>%
ggplot(mapping = aes(x = date,
y = dailycount,
colour = factor(type))) +
geom_line() +
labs(title = "Web Traffic: Daily Count",
x = "Time of Occurrence [1D]",
y = "Daily count",
fill = type)  #+
#theme_economist_white() # we can change the theme for something cooler ?
ggplotly(ts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
# NEED IMPROVEMENT UNREADABLE
library(tsibble)
# Fill time gaps
pageviews_nogaps <- pageviews_ts %>%
fill_gaps()
library(feasts)
# Seasonal plot
eliz_seasonal <- pageviews_nogaps %>%
filter(type == "Elizabeth_II") %>%
gg_season(y = dailycount)
# Subseries
eliz_sub <- pageviews_nogaps %>%
filter(type == "Elizabeth_II") %>%
gg_subseries(y = dailycount)
# pour chaque "type" on crée une time series modifiée "modified_ts" pour lesquelles on recalcules la valeur de daily count en utilisant la formule du dessus. etant donné qu'on a - Xi-7 on peut que commencer à calculer pour la 8ème observation de chaque time series (1 par type)
type <- as.factor(type)
# Create a modified time series using the initial one
modified_ts <- pageviews_ts
ind <- 1
for (i in levels(type)) {
subset_type <- pageviews_ts %>%
filter(type == i)
for (j in 1:nrow(subset_type)) {
if (j > 7) {
modified_ts$dailycount[[ind]] <- ((subset_type$dailycount[[j]] -  subset_type$dailycount[[j-7]])/subset_type$dailycount[[j-7]])*100
} else {
modified_ts$dailycount[[ind]] <- NA
}
ind <- ind + 1
}
}
modified_ts <- rename(modified_ts,
"daily count modified" = "dailycount")
modifiedts_plot <- modified_ts %>%
ggplot(mapping = aes(x = date,
y = `daily count modified`,
colour = factor(type))) +
geom_line() +
labs(title = "Modified Time Series: Web Traffic",
x = "Time of Occurrence [1D]",
y = "Modified Daily count",
fill = type)  +
theme_economist_white() # we can change the theme for something cooler ?
ggplotly(modifiedts_plot) %>%
config(displayModeBar = T) # can we add the woom opt on the x axis ?
# NEED IMPROVEMENT UNREADABLE
# Binding the modified daily count to have everything in the same place
ts <- cbind(pageviews_ts,
modified_ts)
# Binding the modified daily count to have everything in the same place
ts <- bind_cols(pageviews_ts, modified_ts)
ts <- inner_join(pageviews_ts,modified_ts, by = c("type","date"))
hon_yaxis <- list(
tickfont= list(color = "orange"),
overlaying="y",
side="right",
title="daily count"
)
tss <- ts %>%filter(type == "2016_Summer_Olympics")
plot_ly(tss,width = 800, height = 350)%>%
add_lines(x=~date,y=~`daily count modified`,name="daily count modified") %>%
add_lines(x=~date,y=~dailycount, name="daily count",yaxis = "y2") %>%
layout(title="daily count for 2016 summery Olympics",yaxis2 = hon_yaxis) %>% config(displayModeBar = FALSE)
View(ts)
View(modified_ts)
ts <- bind_cols(pageviews_ts, modified_ts) %>%
arrange(date, type)
# Binding the modified daily count to have everything in the same place
ts <- bind_cols(pageviews_ts, modified_ts)
View(ts)
ts <- inner_join(pageviews_ts, modified_ts, by = c("type","date"))
View(ts)
ts <- ts %>%
arrange(date, type)
View(ts)
ts <- ts %>%
arrange(tye, date)
ts <- ts %>%
arrange(type, date)
View(ts)
hon_yaxis <- list(
tickfont= list(color = "orange"),
overlaying="y",
side="right",
title="daily count"
)
tss <- ts %>%filter(type == "2016_Summer_Olympics")
plot_ly(tss,width = 800, height = 350)%>%
add_lines(x=~date,y=~`daily count modified`,name="daily count modified") %>%
add_lines(x=~date,y=~dailycount, name="daily count",yaxis = "y2") %>%
layout(title="daily count for 2016 summery Olympics",yaxis2 = hon_yaxis) %>% config(displayModeBar = FALSE)
# qqplot by types ( two ways)
#facet_wrap
ggplot(data = ts, aes(sample = `daily count modified`)) +
geom_qq(color = "pink") +
geom_qq_line(color = "dark green",scales = "free") +
labs(y = "daily count modified") +
facet_wrap(~type)
types <- unique(ts$type)
# one plot per type
for (typex in types){
ts_type <- ts %>% filter(type == typex)
qqnorm(ts_type$`daily count modified`,
ylab = "Latitude of Seismic Events",
col = "purple") %>%print ()
ggplot(data = ts_type, aes(sample = `daily count modified`)) +
geom_qq(color = "pink") +
geom_qq_line(color = "dark green") +
labs(y = "Latitude of Seismic Events") %>% print ()
}
types <- unique(ts$type)
ggplot(data = ts, aes(sample = `daily count modified`)) +
geom_qq(color = "pink") +
geom_qq_line(color = "dark green",scales = "free") +
labs(y = "daily count modified") +
facet_wrap(~type)
types <- unique(ts$type)
for (typex in types){
ts_type <- ts %>% filter(type == typex)
ts_type <- ts_type %>% filter(!is.na(`daily count modified`))
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(ts_type$`daily count modified`,
main = paste("Mean Residual Life Plot: Mean Excess Function for", typex) )
plot(x = rep(1:nrow(ts_type),
each = 1),
y = unlist(ts_type$`daily count modified`),
main = paste("Peak-Over-Threshold plot Exceedances for : ", typex),
#sub = paste("threshold =", threshold),
xlab = "Observations",
ylab = "Threshold")
}
# qqplot by types ( two ways)
types <- unique(ts$type)
# one plot per type
for (typex in types){
ts_type <- ts %>%
filter(type == typex)
qqnorm(ts_type$`daily count modified`,
ylab = "Latitude of Seismic Events",
col = "purple") %>%print ()
ggplot(data = ts_type, aes(sample = `daily count modified`)) +
geom_qq(color = "pink") +
geom_qq_line(color = "dark green") +
labs(y = "Latitude of Seismic Events") %>% print ()
}
types <- unique(ts$type)
for (typex in types){
ts_type <- ts %>%
filter(type == typex)
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(ts_type$`daily count modified`,
main = paste("Mean Residual Life Plot: Mean Excess Function for", typex) )
types <- unique(ts$type)
for (typex in types){
ts_type <- ts %>%
filter(type == typex)
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(ts_type$`daily count modified`,
main = paste("Mean Residual Life Plot: Mean Excess Function for", typex))
}
plot(x = rep(1:nrow(ts_type),
each = 1),
y = unlist(ts_type$`daily count modified`),
main = paste("Peak-Over-Threshold plot Exceedances for : ", typex),
#sub = paste("threshold =", threshold),
xlab = "Observations",
ylab = "Threshold")
}
plot(x = rep(1:nrow(ts_type),
each = 1),
y = unlist(ts_type$`daily count modified`),
main = paste("Peak-Over-Threshold plot Exceedances for : ", typex),
#sub = paste("threshold =", threshold),
xlab = "Observations",
ylab = "Threshold")
types <- unique(ts$type)
for (typex in types){
ts_type <- ts %>%
filter(type == typex)
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
plot(x = rep(1:nrow(ts_type),
each = 1),
y = unlist(ts_type$`daily count modified`),
main = paste("Peak-Over-Threshold plot Exceedances for : ", typex),
#sub = paste("threshold =", threshold),
xlab = "Observations",
ylab = "Threshold")
}
types <- unique(ts$type)
u <- c(60, 70, 125, 50, 50, 100, 50, 50, 250, 40, 25)
i <- 1
for (typex in types){
ts_type <- ts %>%
filter(type == typex)
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
plot(x = rep(1:nrow(ts_type),
each = 1),
y = unlist(ts_type$`daily count modified`),
main = paste("Peak-Over-Threshold plot Exceedances for : ", typex),
sub = paste("threshold =", u[i]),
xlab = "Observations",
ylab = "Threshold")
abline(abline(h = u[i], col = "red"))
i <- i+1
}
types <- unique(ts$type)
u <- c(60, 70, 125, 200, 100, 800, 100, 50, 50, 100, 25, 40)
i <- 1
for (typex in types){
ts_type <- ts %>%
filter(type == typex)
ts_type <- ts_type %>%
filter(!is.na(`daily count modified`))
plot(x = rep(1:nrow(ts_type),
each = 1),
y = unlist(ts_type$`daily count modified`),
main = paste("Peak-Over-Threshold plot Exceedances for : ", typex),
sub = paste("threshold =", u[i]),
xlab = "Observations",
ylab = "Threshold")
abline(abline(h = u[i], col = "red"))
i <- i+1
}
