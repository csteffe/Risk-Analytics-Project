library(plotly)
# Plot the time series
time_series <- niveau.ts %>%
ggplot(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert)) +
geom_line() +
# Add the smoothed trend
stat_smooth(color = "green") +
labs(title = "Daily Maximum Water Levels (m.a.s.l) in Stilli",
caption = "source: niveau.Rdata", # [the caption doesn't appear !!!]
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")
ggplotly(time_series) %>%
config(displayModeBar = F)
library(plotly)
# Plot the time series
time_series <- niveau.ts %>%
ggplot(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert)) +
geom_line() +
# Add the smoothed trend
stat_smooth(color = "green") +
labs(title = "Daily Maximum Water Levels (m.a.s.l) in Stilli",
caption = "source: niveau.Rdata", # [the caption doesn't appear !!!]
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")  +
theme_light()
ggplotly(time_series) %>%
config(displayModeBar = F)
library(ggthemes)
library(plotly)
library(ggthemes)
# Plot the time series
time_series <- niveau.ts %>%
ggplot(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert)) +
geom_line() +
# Add the smoothed trend
stat_smooth(color = "green") +
labs(title = "Daily Maximum Water Levels (m.a.s.l) in Stilli",
caption = "source: niveau.Rdata", # [the caption doesn't appear !!!]
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")  +
theme_excel_new()
ggplotly(time_series) %>%
config(displayModeBar = F)
library(plotly)
library(ggthemes)
# Plot the time series
time_series <- niveau.ts %>%
ggplot(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert)) +
geom_line() +
# Add the smoothed trend
stat_smooth(color = "green") +
labs(title = "Daily Maximum Water Levels (m.a.s.l) in Stilli",
caption = "source: niveau.Rdata", # [the caption doesn't appear !!!]
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")  +
theme_excel()
ggplotly(time_series) %>%
config(displayModeBar = F)
library(plotly)
library(ggthemes)
# Plot the time series
time_series <- niveau.ts %>%
ggplot(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert)) +
geom_line() +
# Add the smoothed trend
stat_smooth(color = "green") +
labs(title = "Daily Maximum Water Levels (m.a.s.l) in Stilli",
caption = "source: niveau.Rdata", # [the caption doesn't appear !!!]
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")  +
theme_economist()
ggplotly(time_series) %>%
config(displayModeBar = F)
library(plotly)
library(ggthemes)
# Plot the time series
time_series <- niveau.ts %>%
ggplot(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert)) +
geom_line() +
# Add the smoothed trend
stat_smooth(color = "green") +
labs(title = "Daily Maximum Water Levels (m.a.s.l) in Stilli",
caption = "source: niveau.Rdata", # [the caption doesn't appear !!!]
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")  +
theme_economist_white()
ggplotly(time_series) %>%
config(displayModeBar = F)
library(plotly)
library(ggthemes)
# Plot the time series
time_series <- niveau.ts %>%
ggplot(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert,)) +
geom_line() +
+ scale_color_manual(values = "grey19") +
# Add the smoothed trend
stat_smooth(color = "azure3") +
labs(title = "Daily Maximum Water Levels (m.a.s.l) in Stilli",
caption = "source: niveau.Rdata", # [the caption doesn't appear !!!]
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")  +
theme_economist_white()
library(plotly)
library(ggthemes)
# Plot the time series
time_series <- niveau.ts %>%
ggplot(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert,)) +
geom_line() +
scale_color_manual(values = "grey19") +
# Add the smoothed trend
stat_smooth(color = "azure3") +
labs(title = "Daily Maximum Water Levels (m.a.s.l) in Stilli",
caption = "source: niveau.Rdata", # [the caption doesn't appear !!!]
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")  +
theme_economist_white()
ggplotly(time_series) %>%
config(displayModeBar = F)
library(plotly)
library(ggthemes)
# Plot the time series
time_series <- niveau.ts %>%
ggplot(mapping = aes(x = Zeitpunkt_des_Auftretens,
y = Wert,)) +
geom_line() +
# Add the smoothed trend
stat_smooth(color = "cyan4") +
labs(title = "Daily Maximum Water Levels (in m.a.s.l) in Stilli",
caption = "source: niveau.Rdata", # [the caption doesn't appear !!!]
x = "Time of Occurrence [1D]",
y = "Water Level Values [m.a.s.l]")  +
theme_economist_white()
ggplotly(time_series) %>%
config(displayModeBar = F)
summary(niveau.ts$Wert)
# Histogram
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert), stat = "density", colour = "red") +
# Adds the mode
#geom_vline(xintercept = mode(niveau.ts$Wert),
#col = "blue",
#lwd = 1) +
# Adds the mean
geom_vline(xintercept = mean(niveau.ts$Wert),
col = "green",
lwd = 1) +
# Adds the median
geom_vline(xintercept = median(niveau.ts$Wert),
col = "purple",
lwd = 1) +
labs(title = "Water Levels Frequencies",
x = "Water Level Value [meter above sea]",
y = "Frequency") +
# Adds legend
theme(legend.position="right")
# Histogram
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert), stat = "density", colour = "red") +
theme_economist_white() +
# Adds the mode
#geom_vline(xintercept = mode(niveau.ts$Wert),
#col = "blue",
#lwd = 1) +
# Adds the mean
geom_vline(xintercept = mean(niveau.ts$Wert),
col = "green",
lwd = 1) +
# Adds the median
geom_vline(xintercept = median(niveau.ts$Wert),
col = "purple",
lwd = 1) +
labs(title = "Water Levels Frequencies",
x = "Water Level Value [meter above sea]",
y = "Frequency") +
# Adds legend
theme(legend.position="right")
# Histogram
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert),
stat = "density",
colour = "cornflowerblue") +
theme_economist_white() +
# Adds the mode
#geom_vline(xintercept = mode(niveau.ts$Wert),
#col = "blue",
#lwd = 1) +
# Adds the mean
geom_vline(xintercept = mean(niveau.ts$Wert),
col = "aquamarine3",
lwd = 1) +
# Adds the median
geom_vline(xintercept = median(niveau.ts$Wert),
col = "aquamarine4",
lwd = 1) +
labs(title = "Frequency of daily water level maxima",
subtitle = "From 2000 to 2021",
x = "Daily water level maxima [meter above sea]",
y = "Frequency") +
# Adds legend
theme(legend.position="right")
# Histogram
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert),
stat = "density",
colour = "cornflowerblue") +
theme_economist_white() +
# Adds the mode: most occurring value
geom_vline(aes(xintercept = fun.mode(niveau.ts$Wert)),
col = 'aquamarine2') +
# Adds the mean
geom_vline(xintercept = mean(niveau.ts$Wert),
col = "aquamarine3",
lwd = 1) +
# Adds the median
geom_vline(xintercept = median(niveau.ts$Wert),
col = "aquamarine4",
lwd = 1) +
labs(title = "Frequency of daily water level maxima",
subtitle = "From 2000 to 2021",
x = "Daily water level maxima [meter above sea]",
y = "Frequency") +
# Adds legend
theme(legend.position="right")
install.packages("DescTools")
library(DescTools)
library(DescTools)
# Histogram
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert),
stat = "density",
colour = "cornflowerblue") +
theme_economist_white() +
# Adds the mode: most occurring value
geom_vline(aes(xintercept = Mode(niveau.ts$Wert)),
col = 'aquamarine2') +
# Adds the mean
geom_vline(xintercept = mean(niveau.ts$Wert),
col = "aquamarine3",
lwd = 1) +
# Adds the median
geom_vline(xintercept = median(niveau.ts$Wert),
col = "aquamarine4",
lwd = 1) +
labs(title = "Frequency of daily water level maxima",
subtitle = "From 2000 to 2021",
x = "Daily water level maxima [meter above sea]",
y = "Frequency") +
# Adds legend
theme(legend.position="right")
# Histogram
niveau.ts %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert),
stat = "density",
colour = "cornflowerblue") +
theme_economist_white() +
# Adds the mode: most occurring value
#geom_vline(aes(xintercept = Mode(niveau.ts$Wert)),
#col = 'aquamarine2') +
# Adds the mean
geom_vline(xintercept = mean(niveau.ts$Wert),
col = "aquamarine3",
lwd = 1) +
# Adds the median
geom_vline(xintercept = median(niveau.ts$Wert),
col = "aquamarine4",
lwd = 1) +
labs(title = "Frequency of daily water level maxima",
subtitle = "From 2000 to 2021",
x = "Daily water level maxima [meter above sea]",
y = "Frequency") +
# Adds legend
theme(legend.position="right")
library(extRemes)
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(niveau.ts$Wert,)
#+ labs(title = "Mean Residual Life Plot",
#caption = "source: niveau.Rdata")
# [ADD A VERTICAL LINE AT 327 TO SHOW THE DIFFERENCE OF THE LINE FROM CURVE TO LINEAR!]
library(extRemes)
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(niveau.ts$Wert,
main = "Mean Residual Life Plot: Mean Excess Function") +
# [MAYBE ADD A VERTICAL LINE AT 327]
library(extRemes)
# Mean Residual Life Plot (MRLP)
extRemes::mrlplot(niveau.ts$Wert,
main = "Mean Residual Life Plot: Mean Excess Function")
# [MAYBE ADD A VERTICAL LINE AT 327]
# Assign the threshold value to a threshold object
threshold <- 327 # 327 as Threshold looks better than 326
# Plot of Peak-over-Threshold
pot <- plot(x = rep(1:7883,
each = 1),
y = unlist(niveau.ts$Wert),
main = "Peaks over Threshold",
sub = paste("threshold =", threshold),
xlab = "series",
ylab = "Threshold")
pot_points <- unlist(niveau.ts$Wert) > threshold
points(x = rep(1:7883, each = 1)[pot_points],
y = unlist(niveau.ts$Wert)[pot_points],
col = "red")
abline(h = threshold, col = "red")
#ggplotly(pot) %>%
#config(displayModeBar = F)   [CAN WE MAKE THIS PLOT INTERACTIVE ?]
# Decluster
decluster <- extRemes::decluster(niveau$Wert,
threshold = 327)
decluster
#summary(decluster)
plot(decluster) +
labs(title = "Declustering of exceedances",
caption = "source: niveau.Rdata",
y = "Water Level Values")
# Decluster
decluster <- extRemes::decluster(niveau$Wert,
threshold = 327)
decluster
#summary(decluster)
plot(decluster,
main = "Declustering of exceedances",
ylab ="Water Level Values")
plot(decluster)
# Decluster
decluster <- extRemes::decluster(niveau$Wert,
threshold = 327)
decluster
#summary(decluster)
plot(decluster,
main = "Declustering of exceedances",
ylab ="Water Level Values",
xlab = "Observations")
exceed <- niveau.ts %>%
filter(Wert >  327)
exceed %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert),
stat = "density",
colour = "cornflowerblue") +
theme_economist_white()
# Create subset with only exceedances
exceed <- niveau.ts %>%
filter(Wert >  327)
# Distribution of exceedances
exceed %>%
ggplot() +
geom_histogram(mapping = aes(Wert),
stat = "count") +
# Adds smoothed version of the histogram
geom_density(mapping = aes(Wert),
stat = "density",
colour = "cornflowerblue") +
theme_economist_white() +
# Adds the mode: most occurring value
#geom_vline(aes(xintercept = Mode(niveau.ts$Wert)),
#col = 'aquamarine2') +
# Adds the mean
geom_vline(xintercept = mean(exceed$Wert),
col = "aquamarine3",
lwd = 1) +
# Adds the median
geom_vline(xintercept = median(exceed$Wert),
col = "aquamarine4",
lwd = 1) +
labs(title = "Frequency of exceedances",
subtitle = "From 2000 to 2021",
x = "Daily water level exceedances [meter above sea]",
y = "Frequency") +
# Adds legend
theme(legend.position="right")
# Decluster
decluster <- extRemes::decluster(niveau$Wert,
threshold = 327)
decluster
#summary(decluster)
plot(decluster,
main = "Declustering of exceedances", # title doesnt appear
ylab ="Water Level Values",
xlab = "Observations")
# Decluster
decluster <- extRemes::decluster(niveau$Wert,
threshold = 327)
decluster
#summary(decluster)
plot(decluster,
main = "Declustering of exceedances", # title doesnt appear
ylab ="Water Level Values",
xlab = "Observations")
# Decluster
decluster <- extRemes::decluster(niveau$Wert,
threshold = 327)
decluster
#summary(decluster)
plot(decluster,
main = "Declustering of exceedances", # title doesnt appear
ylab ="Water Level Values",
xlab = "Observations")
# Log return
ret <- diff(log(niveau.ts$Wert)) #[Here we need to use the exceedances not niveau.ts I think]
plot(niveau.ts$Zeitpunkt_des_Auftretens[-1],
100*ret,
type ="l",
main = "log return over time",
xlab ="Time",
ylab ="log return in %",
col = 1) +
points(niveau.ts$Zeitpunkt_des_Auftretens[-1],
100*ret,
col = 2,
cex = 0.1)
# GPD: 1st way of using Peak-over-Threshold data
gpd <- extRemes::fevd(unlist(decluster),
threshold = threshold,
type = "GP")
plot(gpd,
type = "density",
main = "Empirical POT vs estimated GPD")
# Fit an extreme value distribution to data
gpd <- extRemes::fevd(unlist(decluster),
threshold = threshold,
type = c("GEV", "GP", "PP", "Gumbel", "Exponential"))
plot(gpd,
type = "density",
main = "Empirical POT vs estimated GPD")
# [Make sure its in yearly terms + return level for 50-year AND 100-year]
# Plot of the Return Level
plot(gpd,
type = "rl",
main = "Return level")
# Point Process Model: 2nd way of using Peak-over-Threshold data
pt_pro <- fevd(unlist(niveau.ts$Wert),
threshold = threshold,
type = "PP")
plot(pt_pro,
type = "density",
main = "Empirical POT vs Point Process")
# Plot of the Return Level
plot(pt_pro,
type = "rl",
main = "Return level")
return.level(gpd,
return.period = c(50, 100))
# Fit an extreme value distribution to data
gpd <- extRemes::fevd(unlist(decluster),
threshold = threshold,
type = "GP") # To corect ! which one should we choose
plot(gpd,
type = "density",
main = "Empirical POT vs estimated GPD")
return.level(gpd,
return.period = c(50, 100))
# Fit an extreme value distribution to data
pt_pro <- fevd(unlist(decluster),
threshold = threshold,
type = "PP")
plot(pt_pro,
type = "density",
main = "Empirical POT vs Point Process")
# Fit an extreme value distribution to data
gpd <- extRemes::fevd(unlist(decluster),
threshold = threshold,
type = "GP") # To corect ! which one should we choose
plot(gpd,
type = "density",
main = "Empirical POT vs estimated GPD")
ret_lev <- return.level(gpd,
return.period = c(50, 100))
# Plot of the Return Level
plot(gpd,
type = "rl",
main = "Return level")
ret_lev <- return.level(gpd,
return.period = c(50, 100))
ret_lev <- return.level(gpd,
return.period = c(50, 100))
return.level(gpd,
return.period = c(50, 100))
